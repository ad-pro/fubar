#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa deps/*/ebin -Wall
-module(fubarctl).

add_paths() ->
    code:add_paths(filelib:wildcard("./deps/*/ebin", "./")).

parse_arguments(["-name", TargetName | Rest], Acc, _) ->
    ThisNode = append_node_suffix(TargetName, "_maint_"),
    {ok, _} = net_kernel:start([ThisNode, longnames]),
    parse_arguments(Rest, Acc, nodename(TargetName));

parse_arguments(["-sname", TargetName | Rest], Acc, _) ->
    ThisNode = append_node_suffix(TargetName, "_maint_"),
    {ok, _} = net_kernel:start([ThisNode, shortnames]),
    parse_arguments(Rest, Acc, nodename(TargetName));

parse_arguments(["-cookie", Cookie | Rest], Acc, TargetNode) ->
    erlang:set_cookie(node(), list_to_atom(Cookie)),
    parse_arguments(Rest, Acc, TargetNode);

parse_arguments([Arg | Rest], Acc, TargetNode) ->
    parse_arguments(Rest, [Arg | Acc], TargetNode);

parse_arguments([], Acc, TargetNode) ->
    {lists:reverse(Acc), TargetNode}.

usage() ->
    Lines = [],
    Usage = string:join(Lines, "\n"),
    io:format(Usage).

main([]) ->
    add_paths(),
    usage();

main(Args) ->
    add_paths(),
    ok = start_epmd(),

    {Parameters, TargetNode} = parse_arguments(Args, [], undefined),

    case {net_kernel:hidden_connect_node(TargetNode),
          net_adm:ping(TargetNode)} of
        {true, pong} -> ok;
        {false, pong} ->
            io:format("Failed to connect to node ~p.~n", [TargetNode]),
            halt(1);
        {_, pang} ->
            io:format("Node ~p not responding to pings.~n", [TargetNode]),
            halt(1)
    end,

    case command(Parameters, TargetNode) of
        {ok, Result} ->
            io:format("~p~n", [Result]);
        {error, Error} ->
            io:format("Error: ~p~n", [Error])
    end,

    net_kernel:stop(),

    ok.


command(["getpid"], Node) ->
    Pid = rpc:call(Node, os, getpid, []),
    {ok, list_to_integer(Pid)};

command(["state"], Node) ->
    call_fubar_control(Node, [[Node, state]]);

command(["acl-all"], Node) ->
    call_fubar_control(Node, [[Node, acl, all]]);

command(["acl-get", IpAddress], Node) ->
    call_fubar_control(Node, [[Node, acl, get, IpAddress]]);

command(["acl-set", IpAddress, Allow], Node) ->
    Allow2 = parse_boolean(Allow),
    call_fubar_control(Node, [[Node, acl, set, IpAddress, Allow2]]);

command(["acl-del", IpAddress], Node) ->
    call_fubar_control(Node, [[Node, acl, del, IpAddress]]);

command(["account-all"], Node) ->
    call_fubar_control(Node, [[Node, account, all]]);

command(["account-get", Username], Node) ->
    call_fubar_control(Node, [[Node, account, get, Username]]);

command(["account-set", Username, Password], Node) ->
    call_fubar_control(Node, [[Node, account, set, Username, Password]]);

command(["account-del", Username], Node) ->
    call_fubar_control(Node, [[Node, account, del, Username]]);

command(["trace", ClientId, Active], Node) ->
    Active2 = parse_boolean(Active),
    call_fubar_control(Node, [[Node, trace, ClientId, Active2]]);

command([BadCommand|_Rest], _) ->
    Message = io_lib:format("The command ~p does not exist", [BadCommand]),
    {error, list_to_binary(Message)}.

call_fubar_control(Node, Args) ->
    case rpc:call(Node, fubar_control, call, Args) of
        {badrpc, Reason} ->
            io:format("RPC to ~p failed: ~p~n", [Node, Reason]),
            halt(1);
        Other ->
            {ok, Other}
    end.

start_epmd() ->
    [] = os:cmd(epmd_path() ++ " -daemon"),
    ok.

epmd_path() ->
    ErtsBinDir = filename:dirname(escript:script_name()),
    Name = "epmd",

    case os:find_executable(Name, ErtsBinDir) of
        false ->
            case os:find_executable(Name) of
                false ->
                    io:format("Could not find epmd~n"),
                    halt(1);
                GlobalEpmd ->
                    GlobalEpmd
            end;                    
        Epmd -> Epmd
    end.

nodename(Name) ->
    case string:tokens(Name, "@") of
        [_Node, _Host] ->
            list_to_atom(Name);
        [Node] ->
            [_, Host] = string:tokens(atom_to_list(node()), "@"),
            list_to_atom(lists:concat([Node, "@", Host]))
    end.

append_node_suffix(Name, Suffix) ->
    case string:tokens(Name, "@") of
        [Node, Host] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid(), "@", Host]));
        [Node] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid()]))
    end.

% type_of(X) when is_integer(X) -> integer;
% type_of(X) when is_float(X) -> float;
% type_of(X) when is_list(X) -> list;
% type_of(X) when is_tuple(X) -> tuple;
% type_of(X) when is_bitstring(X) -> bitstring;
% type_of(X) when is_binary(X) -> binary;
% type_of(X) when is_boolean(X)   -> boolean;
% type_of(X) when is_function(X)  -> function;
% type_of(X) when is_pid(X)       -> pid;
% type_of(X) when is_port(X)      -> port;
% type_of(X) when is_reference(X) -> reference;
% type_of(X) when is_atom(X)      -> atom;
% type_of(_X)                     -> unknown.

parse_boolean(true) -> true;
parse_boolean(false) -> false;
parse_boolean(Val) when is_binary(Val) -> parse_boolean(binary_to_list(Val));

parse_boolean(Val) ->
    case string:to_lower(Val) of
        "true" -> true;
        "false" -> false;
        _ ->
            Msg = io_lib:format("Invalid boolean parameter: ~p", [Val]),
            throw({query_parse_error, list_to_binary(Msg)})
    end.